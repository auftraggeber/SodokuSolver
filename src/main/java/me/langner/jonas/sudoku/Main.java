package me.langner.jonas.sudoku;

public class Main {

    public void main(String[] args) {
        Sudoku s = new Sudoku(3, new int[][]{
                {   0   ,   3   ,   0   ,      0   ,   0   ,   0   ,       0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,      1   ,   9   ,   5   ,       0   ,   0   ,   0   },
                {   0   ,   0   ,   8   ,      0   ,   0   ,   0   ,       0   ,   6   ,   0   },

                {   8   ,   0   ,   0   ,      0   ,   6   ,   0   ,       0   ,   0   ,   0   },
                {   4   ,   0   ,   0   ,      8   ,   0   ,   0   ,       0   ,   0   ,   1   },
                {   0   ,   0   ,   0   ,      0   ,   2   ,   0   ,       0   ,   0   ,   0   },

                {   0   ,   6   ,   0   ,      0   ,   0   ,   0   ,       2   ,   8   ,   0   },
                {   0   ,   0   ,   0   ,      4   ,   1   ,   9   ,       0   ,   0   ,   5   },
                {   0   ,   0   ,   0   ,      0   ,   0   ,   0   ,       0   ,   7   ,   0   }
        });

        System.out.println(s.getSolutionPath().get(0).getID());

        /*new Sudoku(4, new int[][] {
                {   13   ,   0   ,   16   ,   2   ,       0   ,   8   ,   0   ,   0   ,       5   ,   0   ,   4   ,   0   ,      11   ,   0   ,   0   ,   7   },
                {   15   ,   0   ,   4   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   11   ,   14   ,   7   ,       0   ,   8   ,   0   ,   0   },
                {   11   ,   9   ,   0   ,   0   ,       5   ,   0   ,   12   ,   0   ,       0   ,   6   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },
                {   0   ,   8   ,   10   ,   0   ,       0   ,   0   ,   0   ,   11   ,       0   ,   3   ,   2   ,   0   ,       0   ,   4   ,   0   ,   0   },

                {   8   ,   10   ,   0   ,   0   ,       14   ,   7   ,   0   ,   0   ,       0   ,   16   ,   0   ,   0   ,       4   ,   0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,   0   ,       16   ,   2   ,   13   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   1   ,   6   },
                {   9   ,   0   ,   7   ,   0   ,       0   ,   0   ,   15   ,   5   ,       0   ,   0   ,   1   ,   0   ,       0   ,   0   ,   13   ,   0   },
                {   3   ,   0   ,   0   ,   13   ,       0   ,   10   ,   1   ,   0   ,       4   ,   0   ,   0   ,   15   ,       9   ,   0   ,   0   ,   0   },

                {   0   ,   0   ,   0   ,   0   ,       1   ,   0   ,   0   ,   0   ,       15   ,   0   ,   5   ,   4   ,       0   ,   0   ,   9   ,   14   },
                {   12   ,   0   ,   0   ,   4   ,       13   ,   3   ,   16   ,   2   ,       0   ,   7   ,   0   ,   14   ,       0   ,   0   ,   8   ,   0   },
                {   0   ,   11   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       6   ,   0   ,   0   ,   10   ,       0   ,   0   ,   0   ,   2   },
                {   0   ,   0   ,   0   ,   0   ,       0   ,   9   ,   14   ,   0   ,       3   ,   13   ,   0   ,   0   ,       0   ,   5   ,   0   ,   12   },

                {   0   ,   2   ,   0   ,   0   ,       10   ,   0   ,   0   ,   8   ,       0   ,   0   ,   0   ,   0   ,       0   ,   7   ,   0   ,   0   },
                {   0   ,   0   ,   15   ,   5   ,       0   ,   13   ,   3   ,   0   ,       0   ,   14   ,   0   ,   9   ,       10   ,   1   ,   0   ,   0   },
                {   14   ,   7   ,   0   ,   9   ,       0   ,   15   ,   5   ,   4   ,       1   ,   0   ,   0   ,   8   ,       0   ,   13   ,   3   ,   0   },
                {   0   ,   1   ,   6   ,   0   ,       0   ,   11   ,   9   ,   14   ,       13   ,   2   ,   3   ,   0   ,       12   ,   0   ,   5   ,   0   },


        });


        /*
        new Sudoku(4, new int[][] {
                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },

                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },

                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },

                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   ,       0   ,   0   ,   0   ,   0   },


        });

        schwerstes 3x3 Ã¼berhaupt:

        new Sudoku(3, new int[][]{
                {   8   ,   0   ,   0   ,      0   ,   0   ,   0   ,       0   ,   0   ,   0   },
                {   0   ,   0   ,   3   ,      6   ,   0   ,   0   ,       0   ,   0   ,   0   },
                {   0   ,   7   ,   0   ,      0   ,   9   ,   0   ,       2   ,   0   ,   0   },

                {   0   ,   5   ,   0   ,      0   ,   0   ,   7   ,       0   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,      0   ,   4   ,   5   ,       7   ,   0   ,   0   },
                {   0   ,   0   ,   0   ,      1   ,   0   ,   0   ,       0   ,   3   ,   0   },

                {   0   ,   0   ,   1   ,      0   ,   0   ,   0   ,       0   ,   6   ,   8   },
                {   0   ,   0   ,   8   ,      5   ,   0   ,   0   ,       0   ,   1   ,   0   },
                {   0   ,   9   ,   0   ,      0   ,   0   ,   0   ,       4   ,   0   ,   0   }
        });*/
    }
}
